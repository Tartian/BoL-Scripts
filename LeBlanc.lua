if myHero.charName:lower() ~= "leblanc" then return end
	_G.LeBlanc_Loaded = true
	_G.LeBlanc_ScriptVersion = 2.14
	_G.LeBlanc_Author = "Totally Legit"
	_G.LeBlanc_PerformAutoUpdate = true
	_G.LeBlanc_USEPACKETS = true

--[[



		Changelog
			* 1.99
				Improved Smart W
				Added Ignite Checks
				Added Overkill checks
				Fixed the combos
				Better TargetSelecting
				Better combo
				Better GapClosing

			* 2.00
				Script is now paid

			* 2.01
				Switched host
				Forced return W in harass

			* 2.02
				Multiple overkill checks
				Better way of detecting R
				Better gapclosing
				Faster combos
				Better targetselecting
				Message that tells whether you will die or not from ignite
				Auto Level
				Fixed the other killsteal options
				Better KillSteal in general
					Now takes Q buff in according

			* 2.03
				Bug fixes
				Small fix to W casting too fast
				Few more return checks for W

			* 2.04
				Small fixes

			* 2.10
				Improved Smart Combo
				Made more checks with W
					Added turret damage checking
					Added minion checks
				Fixed more stuff & added more checks to avoid possible script-caused crashes
				Added other combos
					GapClose combo
					Chain Combo
						Chains will maximize the slow/stun output
						Prioritizes E -> R over anything
						It'll do R -> Q if E isn't close to being up
				Improved Overkill checks

			* 2.11
				Minor fixes
				Added SPred

			* 2.12
				Updated to 5.15

			* 2.13
				Updated DP API
				Updated W values
				Fix'd minor bugs

			* 2.14
				Fixed compability with Dancing Shoes

--]]


assert(load(Base64Decode(""), nil, "bt", _ENV))()

-- Easier to copy
